/*
 * Copyright 2020 cxsmarkchan. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pyrec.service;

import "pyrec/proto/feature.proto";

message Conf {
  message ConfItem {
    bytes key = 1;
    bytes value = 2;
  }
  repeated ConfItem items = 1;
}

// The information of retrieval, including:
// - retrieval_id: the id of retrieval.
// - score: the score provided by the retrieval algorithm.
// - rank: the rank of the item out of all the items retrieved.
// - num_items: the total number of items retrived by this algorithm.
// The score and the rank can be absent if the retrieval algorithm tends to
// equally recommend all the items.
message RetrievalInfo {
  int32 retrieval_id = 1;
  float score = 2;
  int32 rank = 3;
  int32 num_items = 4;
}

message ItemInfo {
  // We use FeatureMap instead of string for item_id,
  // since an item may have multiple ids from different source
  pyrec.feature.FeatureMap item_id = 1;
  repeated RetrievalInfo retrieval_infos = 2;
  map<int32, float> scores = 3;
}

message PyRecRequest {
  bytes request_id = 1;
  Conf conf = 2;
  map<int32, pyrec.feature.FeatureMap> context = 3;
}

message PyRecRequestWithItems {
  bytes request_id = 1;
  Conf conf = 2;
  map<int32, pyrec.feature.FeatureMap> context = 3;
  repeated ItemInfo items = 4;
}

message ContextReply {
  bytes request_id = 1;
  pyrec.feature.FeatureMap context = 2;
}

message ItemReply {
  bytes request_id = 1;
  repeated ItemInfo items = 2;
}

service RecommendService {
  rpc OnRecommend(PyRecRequest) returns (ItemReply) {}
}

service ConfService {
  rpc OnConfigure(PyRecRequest) returns (Conf) {}
}

service ContextService {
  rpc Context(PyRecRequest) returns (ContextReply) {}
}

service RetrievalService {
  rpc Retrieval(PyRecRequest) returns (ItemReply) {}
}

service RankingService {
  rpc OnRanking(PyRecRequestWithItems) returns (ItemReply) {}
}
